mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= as.factor(county), y= .prediction)) +
geom_boxplot()+
facet_wrap(.~model, scales = "free_y") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= as.factor(county), y= .prediction)) +
geom_boxplot()+
facet_wrap(~ .model, scales = "free_y") +
scale_y_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= as.factor(county), y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_y") +
scale_y_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= county, y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_y") +
scale_y_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= county, y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_x") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= county, y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_x") +
scale_x_reordered()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, mean(.prediction), model)) %>%
ggplot(aes(x= county, y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_x") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= county, y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_x") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
mutate(county = as.factor(county)) %>%
mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= county, y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_y") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
# mutate(county = as.factor(county)) %>%
# mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= reorder_within(county, .prediction, model), y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_y") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
# mutate(county = as.factor(county)) %>%
# mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= reorder_within(county, .prediction, model, fun = mean), y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_y") +
scale_x_reordered() +
coord_flip()
posterior_preds %>%
# mutate(county = as.factor(county)) %>%
# mutate(county = reorder_within(county, .prediction, model)) %>%
ggplot(aes(x= reorder_within(county, .prediction, model, fun = median), y= .prediction)) +
geom_boxplot()+
facet_wrap(~ model, scales = "free_y") +
scale_x_reordered() +
coord_flip()
cifar <- dataset_cifar10()$train
y
cifar <- dataset_cifar10()$train
install_tensorflow()
devtools::install_github("rstudio/tensorflow")
install_github("rstudio/tensorflow")
install.packages("devtools")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow()
library("keras")
f <- tempfile()
download.file("https://uwmadison.box.com/shared/static/9wu6amgizhgnnefwrnyqzkf8glb6ktny.h5", f)
model <- load_model_hdf5(f)
f <- tempfile()
download.file("https://uwmadison.box.com/shared/static/9wu6amgizhgnnefwrnyqzkf8glb6ktny.h5", f)
model <- load_model_hdf5(f)
model <- load_model_hdf5(f)
library("knitr")
opts_chunk$set(cache = FALSE, message = FALSE, warning = FALSE, echo = TRUE)
model <- load_model_hdf5(f)
library("keras")
model <- load_model_hdf5(f)
install.packages("tensorflow")
install.packages("tensorflow")
install.packages("h5py")
cifar <- dataset_cifar10()$train
install_tensorflow()
library(tensorflow)
install.packages("reticulate")
install.packages("reticulate")
install.packages("tensorflow")
install.packages("tensorflow")
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("h5py")
library(keras)
install_keras()
cifar <- dataset_cifar10()$train
f <- tempfile()
download.file("https://uwmadison.box.com/shared/static/c9kkxyrjb9myfj5knj5vnx0j8gn1uh0s.h5", f)
model <- load_model_hdf5(f)
library("knitr")
opts_chunk$set(cache = FALSE, message = FALSE, warning = FALSE, echo = TRUE)
f <- tempfile()
download.file("https://uwmadison.box.com/shared/static/9wu6amgizhgnnefwrnyqzkf8glb6ktny.h5", f)
model <- load_model_hdf5(f)
install.packages("rjson")
library(rjson)
library(tidyverse)
setwd("C:/Users/haomi/OneDrive/Documents/2021_Summer/covid")
json_data <- fromJSON(file="/data/raw_response (1).json")
json_data <- fromJSON(file="./data/raw_response (1).json")
json_data
library(jsonlite)
df = as.data.frame(json_data)
df
json_data$trendline
df = as.data.frame(json_data$trendline)
df
json_file <- fromJSON(file="./data/raw_response (1).json")
json_file <- fromJSON(file="./data/raw_response (1).json")
library(rjson)
library(jsonlite)
library(tidyverse)
json_file <- fromJSON(file="./data/raw_response (1).json")
json_file <- fromJSON(file="./data/raw_response (1).json")
json_data <- fromJSON(file="./data/raw_response (1).json")
json_data <- fromJSON(file="./data/raw_response (1).json")
library(rjson)
library(tidyverse)
json_data <- fromJSON(file="./data/raw_response (1).json")
json_file <- lapply(json_file, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
json_data
length(json_data$trendline)
json_data$trendline[1]
json_data <- lapply(json_data, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
json_data
json_data$trendline
json_data <- fromJSON(file="./data/raw_response (1).json")
json_data$trendline[1]
json_data$trendline[1]["Completely satisfied"]
json_data$trendline[1]
json_data$trendline[1][0]
json_data$trendline[1]
json_data$trendline[2]
colnames(json_data$trendline[2])
json_data$trendline[2]
str(json_data$trendline[2])
json_data$trendline[2]
json_data$trendline[2][1]
json_data$trendline[2][2]
json_data$trendline[2][3]
json_data$trendline[2][1]
json_data$trendline[2][1][1]
json_data$trendline[2][1][2]
json_data$trendline[2]
json_data$trendline[2]$`1585180800000`
json_data$trendline[2]$`1585180800000`$`Completely satisfied`
json_data$trendline[3]$`1585180800000`$`Completely satisfied`
json_data$trendline[1]$`1585180800000`$`Completely satisfied`
json_data$trendline[1]
json_data$trendline[1][[0]]
json_data$trendline[1][[0]]
json_data$trendline[[1]]
json_data$trendline[[2]]
json_data$trendline[[3]]
json_data$trendline[[425]]
data <- lapply(json_data, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
data
json_data$trendline[[425]]
json_data$trendline[[0]]
json_data$trendline[[1]]
json_data[[1]]
json_data[[2]]
json_data$trendline[[1]]
json_data$trendline[[1]][1]
json_data$trendline[[1]][2]
json_data$trendline[[1]][["Mostly satisfied"]]
View(json_data)
json_data$trendline
json_data
json_data <- fromJSON(file="./data/raw_response (1).json". flatten = TRUE)
json_data <- fromJSON(file="./data/raw_response (1).json", flatten = TRUE)
json_data <- fromJSON("./data/raw_response (1).json", flatten = TRUE)
json_data <- jsonLite::fromJSON("./data/raw_response (1).json", flatten = TRUE)
library(jsonlite)
json_data <- jsonlite::fromJSON("./data/raw_response (1).json", flatten = TRUE)
json_data <- jsonlite::fromJSON("./data/raw_response (1).json", flatten = TRUE)
View(json_data)
json_data
json_data$trendline
str(json_data$trendline)
library("purrr")
map(json_data$trendline, 1)
map(json_data$trendline, 2)
map(json_data$trendline, 2)[[1]]
map(json_data$trendline, 2)[[2]]
map(json_data$trendline, 2)
json_data$trendline[[1]
json_data$trendline[[1]]
json_data$trendline[[1]]
complete_satis = map(json_data$trendline, 1)
mostly_satis = map(json_data$trendline, 2)
not_satis_at_all = map(json_data$trendline, 3)
not_very_satisfy= map(json_data$trendline, 4)
unsure = map(json_data$trendline, 5)
unsure
as.data.frame(do.call(cbind, json_data$trendline))
as.data.frame(do.call(rbind, json_data$trendline))
df[1,1]
df
df = as.data.frame(do.call(rbind, json_data$trendline))
df
df[1]
df[1][1]
df[1][2]
df[1,1]
df[1,1][1]
df[1,1][0]
df[1,1]
df[1,2]
df[1,3]
df
View(df)
df %>%
rownames_to_column(df, "date")
df %>%
rownames_to_column(df)
df %>%
rownames_to_column("date")
df = df %>%
rownames_to_column("date")
df
View(df)
library(lubridate)
df = df %>%
rownames_to_column("date") %>%
as_datetime(date)
df = df %>%
rownames_to_column("date")
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date")
df
df %>%
as_datetime(date)
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date = as.interger(date))
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date = as.integer(date))
df %>%
as_datetime(date)
df
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date")
df
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date = as.numeric(date))
df
df
df %>%
as_datetime(date)
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(date, origin="1970-01-01")))
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date")
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(date), origin="1970-01-01")))
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Dat
df = as.data.frame(do.call(rbind, json_data$trendline))
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.integer(date), origin="1970-01-01")))
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date)), origin="1970-01-01", tz="GMT")))
df = as.data.frame(do.call(rbind, json_data$trendline))
View(df)
View(df)
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date)/1000), origin="1970-01-01", tz="GMT")))
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT")))
df %>%
as_datetime(date)
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT")))
View(df)
View(df)
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT")))
View(df)
df = as.data.frame(do.call(rbind, json_data$trendline))
df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df = as.data.frame(do.call(rbind, json_data$trendline))
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
df
df = as.data.frame(do.call(rbind, json_data$trendline))
df
unlist(df)
unlist(df[1,1])
unlist(df[1,1][1])
unlist(df[1,1][2])
unlist(df[1,1][1])
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
df = as.data.frame(do.call(rbind, json_data$trendline))
df
sapply(df[1,1], "[[", 1)df
sapply(df[1,1], "[[", 1)
df[1,1]
sapply(df[1,1], "[[", 1)
sapply(df[1,1], "[[", 1)[1]
sapply(df[1,1], "[[", 1)
df[1,1]
df[1,1]$`1585094400000`
df[1,1]
sapply(d, function(x) x[1])
sapply(df, function(x) x[1])
sapply(df[1,1], function(x) x[1])
a = sapply(df[1,1], function(x) x[1])
a
unname(a)
b = unname(a)
b
b[1]
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
a = unname(sapply(df[1,1], function(x) x[1]))
a
nrows(df)
nrow(df)
nrow(df)
ncol(df)
df = as.data.frame(do.call(rbind, json_data$trendline))
ncol(df)
for (i in 1:nrow(df)){
print(i)
}
for (i in 1:nrow(df)){
for (j in 1:ncol(df)){
df[i, j] = unname(sapply(df[i,j], function(x) x[1]))
}
}
df = df %>%
mutate_all()
df = as.data.frame(do.call(rbind, json_data$trendline))
for (i in 1:nrow(df)){
for (j in 1:ncol(df)){
df[i, j] = unname(sapply(df[i,j], function(x) x[1]))
}
}
df
print(df[i,j])
df = as.data.frame(do.call(rbind, json_data$trendline))
for (i in 1:nrow(df)){
for (j in 1:ncol(df)){
df[i, j] = unname(sapply(df[i,j], function(x) x[1]))
print(df[i,j])
}
}
for (i in 1:nrow(df)){
for (j in 1:ncol(df)){
df[i, j] = unname(sapply(df[i,j], function(x) x[1]))
print( unname(sapply(df[i,j], function(x) x[1])))
print(df[i,j])
}
}
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
df
df[1,1]
df[1,2]
df_decoded = data.frame(matrix(NA, nrow = nrow(df), ncol = ncol(df)))
for (i in 1:nrow(df)){
for (j in 1:ncol(df)){
df_decoded[i, j] = unname(sapply(df[i,j], function(x) x[1]))
}
}
df_decoded
df = as.data.frame(do.call(rbind, json_data$trendline))
df_decoded = data.frame(matrix(NA, nrow = nrow(df), ncol = ncol(df)))
df = df %>%
rownames_to_column("date") %>%
mutate(date =as.Date(as.POSIXct(as.numeric(as.character(date))/1000, origin="1970-01-01", tz="GMT"))) %>%
mutate(date = format(as.Date(date), "%Y-%m"))
for (i in 1:nrow(df)){
for (j in 1:ncol(df)){
df_decoded[i, j] = unname(sapply(df[i,j], function(x) x[1]))
}
}
df_decoded
colnames(df)
colname(df)
colnames(df)
colnames(df_decoded) = colnames(df)
df_decoded
df %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df_decoded %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`))
df_decoded
df_decoded %>%
group_by(date) %>%
summarise(mean(`Completely satisfied`), mean(`Mostly satisfied`), mean(`Not satisfied at all`), mean(`Not very satisfied`), mean(Unsure))
